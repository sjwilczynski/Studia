%nie dziala jesli generatorem jest 11

d_gen(_,_,X,[],_,_,[X],_,_,[]):-!.
d_gen(LW,N,X,L1,L,WSP,NL1,NL,L2,NL2):-
	length(L1,A),
	A < N,
	NL1 = [X|L1], 
	znajdz_iloczyny(LW,N,X,L1,L,NL,WSP,L2,NL2). 
sprawdzenie(LW,N,X,H,L2,WSP,SAS):-
	tabl(WSP,K1,LW,N),
	sasiad(WSP,SAS,N),
	\+member(SAS,L2),
	tabl(SAS,K2,LW,N),
	K1 > 0,
	Z is 10*K1 + K2,
	Y is X*H,
	Z == Y.

znajdz_iloczyny(_,_,_,_,_,_,(0,0),_,_):-!,fail.
znajdz_iloczyny(_,_,_,[],RES,RES,_,RE,RE):-!.
znajdz_iloczyny(LW,N,X,L1,L,NL,WSP,L2,NL2):-
	member(WSP,L2),!,
	nastepny(WSP,NWSP,N),
	znajdz_iloczyny(LW,N,X,L1,L,NL,NWSP,L2,NL2).
znajdz_iloczyny(LW,N,X,[H|L1],L,NL,WSP,L2,NL2):-
	sprawdzenie(LW,N,X,H,L2,WSP,SAS),
	X >= H,
	wstaw(((WSP,SAS),(H,X)),L,A),
	A2 = [WSP,SAS|L2],
	znajdz_iloczyny(LW,N,X,L1,A,NL,(1,1),A2,NL2).
znajdz_iloczyny(LW,N,X,[H|L1],L,NL,WSP,L2,NL2):-
	sprawdzenie(LW,N,X,H,L2,WSP,SAS),
	X < H,
	wstaw(((WSP,SAS),(X,H)),L,A),
	A2 = [WSP,SAS|L2],
	znajdz_iloczyny(LW,N,X,L1,A,NL,(1,1),A2,NL2).

znajdz_iloczyny(LW,N,X,L1,L,NL,WSP,L2,NL2):-
	nastepny(WSP,NWSP,N),
	znajdz_iloczyny(LW,N,X,L1,L,NL,NWSP,L2,NL2).

sol(N,RES,RES,R,R,_,_,_):-
	length(R,N),!.
sol(N,A,L,A1,L1,L2,LW,(Min,Max)):-
	liczba_z_przedzialu(X,Min,Max),
	d_gen(LW,N,X,A1,A,(1,1),NA1,NA,L2,NL2),
	NA1 = [NH|_],
	NMax is 100//NH,
	sol(N,NA,L,NA1,L1,NL2,LW,(NH,NMax)).

solve(N,LW,(L1,L)):-
	flatten(LW,FLW),
	sol(N,[],WL,[],WL1,[],FLW,(1,100)),
	reverse(WL1,L1),
	zamien(WL,L).
	%nl,write(L),nl.

liczba_z_przedzialu(X,A,B):-
	liczba(X,A,B,A).
liczba(A,A,B,_):-
	A =< B.
liczba(X,A,B,C):-
	C<B,
	liczba(X1,A,B,C+1),
	X is X1+1.
flatten(List, Flattened):-
  	flatten(List, Flattened, []).
flatten([], Flattened, Flattened).
flatten([H|T], [H|Flattened], Acc):-
  	atomic(H), !,
  	flatten(T, Flattened, Acc).
flatten([H|T], Flattened, Acc):-
  	flatten(T, TailFlattened, Acc),
  	flatten(H, Flattened, TailFlattened).
tabl((A,B),H,LW,N):-
	Z is (A-1)*N+B-1,
	length(L1,Z),
	append(L1,L2,LW),
	L2 = [H|_].
sasiad((X,Y),(A,B),N):-
	A is X+1,
	B = Y,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A is X+1,
	B is Y+1,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A is X+1,
	B is Y-1,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A = X,
	B is Y+1,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A is X-1,
	B is Y+1,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A is X-1,
	B = Y,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A is X-1,
	B is Y-1,
	A =< N-1,A >= 1,B =< N,B >= 1.
sasiad((X,Y),(A,B),N):-
	A = X,
	B is Y-1,
	A =< N-1,A >= 1,B =< N,B >= 1.
nastepny((A,B),(X,Y),N):-
	B < N,!,
	B1 is B+1,
	X = A,B1 = Y.
nastepny((A,_),(X,Y),N):-
	A1 is A+1,
	A1 =< N-1,
	X = A1,Y = 1.
nastepny((A,N),(0,0),N):-
	A is N-1.

wstaw(X,[],[X]):-!.
wstaw(X,[H|L],[X,H|L]):-
	X = ((_,_),(A,_)),
	H = ((_,_),(C,_)),
	A < C,!.
wstaw(X,[H|L],[X,H|L]):-
	X = ((_,_),(A,B)),
	H = ((_,_),(C,D)),
	A == C,
	B =< D,!.
wstaw(X,[H|L],[H|R]):-
	wstaw(X,L,R).

zamien([],[]).
zamien([H|L],[NH|NL]):-
	H = (X,_,_),
	X = (Y,A,B),
	NH = (Y,(A,B)),
	zamien(L,NL).
